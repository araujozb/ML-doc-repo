{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#template-de-entrega","title":"Template de Entrega","text":"Edi\u00e7\u00e3o <p>2025.2</p>"},{"location":"#nome","title":"Nome","text":"<ul> <li>Bianca C. Fagundes de Ara\u00fajo  </li> </ul> <p>Instru\u00e7\u00f5es</p> <p>Este template ser\u00e1 utilizado como bloco de notas da disciplida de Machine Learning  e tamb\u00e9m para estudo pessoal. Este template ser\u00e1 atualizado e editado a cada entrega e registrando tudo o que foi feito at\u00e9 a ada de entrega via Git.  </p>"},{"location":"#abas","title":"Abas","text":"<p>As abas da documenta\u00e7\u00e3o s\u00e3o divididas em: - Exerc\u00edcios (registros dos exerc\u00edcios passados na mat\u00e9ria de ML) - Roteiros (resumo e estudos dos conte\u00fados englobados pela mat\u00e9ria) - Projeto ( dedicado ao Projeto Final da mat\u00e9ria de ML)  </p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Roteiro 1 - Data 29/08/2025</li> <li> Roteiro 2</li> <li> Roteiro 3</li> <li> Roteiro 4</li> <li> Projeto</li> </ul>"},{"location":"#diagramas","title":"Diagramas","text":"<p>Use o Mermaid para criar os diagramas de documenta\u00e7\u00e3o.</p> <p>Mermaid Live Editor</p> <pre><code>flowchart TD\n    Deployment:::orange --&gt;|defines| ReplicaSet\n    ReplicaSet --&gt;|manages| pod((Pod))\n    pod:::red --&gt;|runs| Container\n    Deployment --&gt;|scales| pod\n    Deployment --&gt;|updates| pod\n\n    Service:::orange --&gt;|exposes| pod\n\n    subgraph  \n        ConfigMap:::orange\n        Secret:::orange\n    end\n\n    ConfigMap --&gt; Deployment\n    Secret --&gt; Deployment\n    classDef red fill:#f55\n    classDef orange fill:#ffa500</code></pre>"},{"location":"#codigos","title":"C\u00f3digos","text":"De um arquivo remotoAnota\u00e7\u00f5es no c\u00f3digo main.yaml<pre><code>name: ci\non:\n  - push\n  - pull_request\n\n# Environment\nenv:\n  CI: true\n  PYTHON_VERSION: 3.12\n\n# Jobs to run\njobs:\n\n  # Build and deploy documentation site\n  deploy:\n    if: github.event_name != 'pull_request' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n\n      # Checkout source form GitHub\n      - uses: actions/checkout@v4\n\n      # Install Python runtime and dependencies\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # pip\n      - run: |\n          pip install -r requirements.txt\n\n      # deploy\n      - run: |\n          mkdocs gh-deploy --force\n</code></pre> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel da porta 5432 do container do banco de dados para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol>"},{"location":"#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Lorem ipsum dolor sit amet</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"decision-tree/exercicio/main/","title":"Exerc\u00edcio","text":""},{"location":"decision-tree/exercicio/main/#objetivo","title":"Objetivo","text":"<p>Aplicar o algoritmo de \u00e1rvore de decis\u00e3o em um conjunto de dados de classifica\u00e7\u00e3o, explorando e pr\u00e9-processando os dados, realizando a divis\u00e3o em treino e teste, treinando o modelo e avaliando seu desempenho por meio de m\u00e9tricas adequadas.</p>"},{"location":"decision-tree/exercicio/main/#etapas","title":"Etapas","text":"<ul> <li> Explora\u00e7\u00e3o dos Dados (EDA) </li> <li> Pr\u00e9-processamento</li> <li> Divis\u00e3o dos Dados</li> <li> Treinamento do Modelo</li> <li> Avalia\u00e7\u00e3o do Modelo</li> <li> Relat\u00f3rio Final</li> </ul>"},{"location":"decision-tree/exercicio/main/#escolha-do-dataset-mushroom-dataset","title":"Escolha do Dataset -  (Mushroom Dataset)","text":"<p>O dataset escolhido para o projeto foi o Mushroom Dataset, onde h\u00e1 as especifica\u00e7\u00f5es do cogumelo e uma coluna \"class\" que possui duas categorias ( e - eatable / p - poisonous ).  </p>"},{"location":"decision-tree/exercicio/main/#1-exploracao-dos-dados-eda","title":"1. Explora\u00e7\u00e3o dos Dados (EDA)","text":"<p>Nesta etapa, buscou-se compreender a natureza do dataset Mushroom, obtido do OpenML. Foram analisados o tamanho do conjunto, a distribui\u00e7\u00e3o da vari\u00e1vel alvo e algumas vari\u00e1veis descritivas, com apoio de estat\u00edsticas e gr\u00e1ficos.  </p> CodeOutputGr\u00e1ficoExplica\u00e7\u00e3o <pre><code>from sklearn.datasets import fetch_openml\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\nmush = fetch_openml(name=\"mushroom\", version=1, as_frame=True)\ndf = mush.frame\n\nprint(\"Shape:\", df.shape)\nprint(df.head())\nprint(df.describe(include='all').T.head())\nprint(\"\\nDistribui\u00e7\u00e3o da classe:\\n\", df[\"class\"].value_counts())\n\nimg_dir = \"docs/decision-tree/exercicio/img\"\nos.makedirs(img_dir, exist_ok=True)\n\ndf[\"odor\"].value_counts().plot(kind=\"bar\", title=\"Frequ\u00eancia de ODOR\")\nplt.savefig(f\"{img_dir}/eda_bar_odor.png\"); plt.clf()\n\npd.crosstab(df[\"gill-color\"], df[\"class\"]).plot(kind=\"bar\", stacked=True, title=\"Gill-color x Class\")\nplt.savefig(f\"{img_dir}/eda_stack_gillcolor.png\"); plt.clf()\n</code></pre> <pre><code>Shape: (8124, 23)\nDistribui\u00e7\u00e3o da classe:\ne    4208\np    3916\nName: class, dtype: int64\n</code></pre> <p> </p> <ul> <li>Dataset Mushroom com 8.124 amostras e 22 vari\u00e1veis categ\u00f3ricas.  </li> <li>Atributo alvo <code>class</code>: <code>e = edible (comest\u00edvel)</code> e <code>p = poisonous (venenoso)</code>.  </li> <li>Odor j\u00e1 se mostra altamente discriminativo.  </li> <li>Algumas cores de lamelas (<code>gill-color</code>) tamb\u00e9m variam fortemente por classe.  </li> </ul>"},{"location":"decision-tree/exercicio/main/#2-pre-processamento","title":"2. Pr\u00e9-processamento","text":"<p>dataset apresentou valores ausentes representados por <code>\"?\"</code>, tratados como <code>NaN</code> e posteriormente imputados pela moda. O alvo <code>class</code> foi convertido para formato bin\u00e1rio (<code>e \u2192 0</code>, <code>p \u2192 1</code>).  </p> CodeOutputExplica\u00e7\u00e3o <pre><code>import numpy as np\n\ndf.replace(\"?\", np.nan, inplace=True)\ndf = df.fillna(df.mode().iloc[0])\n\nX = df.drop(columns=[\"class\"])\ny = df[\"class\"].map({\"e\": 0, \"p\": 1})\n</code></pre> <pre><code>Nenhum valor ausente ap\u00f3s imputa\u00e7\u00e3o.\n</code></pre> <ul> <li>Substitu\u00edmos <code>?</code> por <code>NaN</code> e aplicamos imputa\u00e7\u00e3o pela moda.  </li> <li>Target <code>class</code> convertido em bin\u00e1rio (<code>e\u21920</code>, <code>p\u21921</code>).  </li> </ul>"},{"location":"decision-tree/exercicio/main/#3-divisao-dos-dados","title":"3. Divis\u00e3o dos Dados","text":"<p>As vari\u00e1veis categ\u00f3ricas foram transformadas por One-Hot Encoding, resultando em 117 colunas bin\u00e1rias. Em seguida, aplicou-se divis\u00e3o estratificada em treino (70%) e teste (30%).  </p> CodeOutputExplica\u00e7\u00e3o <pre><code>from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\n\nencoder = OneHotEncoder(sparse_output=False, handle_unknown=\"ignore\")\nX_encoded = encoder.fit_transform(X)\nX_encoded = pd.DataFrame(X_encoded, columns=encoder.get_feature_names_out(X.columns))\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X_encoded, y, test_size=0.3, stratify=y, random_state=42\n)\n</code></pre> <pre><code>X_train: (5686, 117)\nX_test:  (2438, 117)\n</code></pre> <ul> <li>One-Hot Encoding expande vari\u00e1veis categ\u00f3ricas em bin\u00e1rias.  </li> <li>Split estratificado 70/30 mant\u00e9m a propor\u00e7\u00e3o de classes.  </li> </ul>"},{"location":"decision-tree/exercicio/main/#4-treinamento-do-modelo","title":"4. Treinamento do Modelo","text":"<p>Foi utilizado o classificador <code>DecisionTreeClassifier</code> da biblioteca scikit-learn, em sua configura\u00e7\u00e3o padr\u00e3o. O modelo foi ajustado com o conjunto de treino e gerou previs\u00f5es para o conjunto de teste.</p> CodeOutputExplica\u00e7\u00e3o <pre><code>from sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier(random_state=42)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n</code></pre> <pre><code>Modelo DecisionTree treinado com sucesso.\n</code></pre> <ul> <li>Classificador <code>DecisionTreeClassifier</code>.  </li> <li>Treinado em <code>X_train, y_train</code>, avaliado em <code>X_test</code>.  </li> </ul>"},{"location":"decision-tree/exercicio/main/#5-avaliacao-do-modelo","title":"5. Avalia\u00e7\u00e3o do Modelo","text":"<p>O desempenho do modelo foi medido por m\u00e9tricas de acur\u00e1cia, precis\u00e3o, recall e F1-score, al\u00e9m da matriz de confus\u00e3o.  </p> CodeOutputGr\u00e1ficoExplica\u00e7\u00e3o <pre><code>from sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\n\nprint(classification_report(y_test, y_pred, target_names=[\"edible(0)\", \"poisonous(1)\"]))\n\ncm = confusion_matrix(y_test, y_pred)\nplt.imshow(cm, cmap=\"Blues\")\nplt.title(\"Matriz de Confus\u00e3o \u2014 Decision Tree\")\nplt.xticks([0,1], [\"edible(0)\", \"poisonous(1)\"])\nplt.yticks([0,1], [\"edible(0)\", \"poisonous(1)\"])\nfor i in range(cm.shape[0]):\n    for j in range(cm.shape[1]):\n        plt.text(j, i, cm[i, j], ha=\"center\", va=\"center\")\nplt.xlabel(\"Predito\"); plt.ylabel(\"Real\")\nplt.savefig(\"docs/decision-tree/exercicio/img/cm_baseline.png\")\nplt.show()\n</code></pre> <pre><code>              precision    recall  f1-score   support\nedible(0)       1.00      1.00      1.00      1263\npoisonous(1)    1.00      1.00      1.00      1175\naccuracy        1.00      2438\nmacro avg       1.00      1.00      1.00      2438\nweighted avg    1.00      1.00      1.00      2438\n</code></pre> <p></p> <ul> <li>O modelo atingiu 100% de acur\u00e1cia no conjunto de teste.  </li> <li>Isso n\u00e3o \u00e9 overfitting, porque:  <ol> <li>O split foi feito corretamente (70/30, estratificado).  </li> <li>O dataset Mushroom \u00e9 determin\u00edstico: n\u00e3o h\u00e1 casos com atributos iguais mas classes diferentes.  </li> <li>Portanto, a \u00e1rvore consegue separar perfeitamente as classes sem memorizar ru\u00eddo.  </li> </ol> </li> <li>Em datasets reais, esse resultado seria suspeito, mas aqui \u00e9 esperado.  </li> </ul>"},{"location":"decision-tree/exercicio/main/#6-importancia-das-features","title":"6. Import\u00e2ncia das Features","text":"<p>Foram analisadas as vari\u00e1veis que mais contribu\u00edram para a redu\u00e7\u00e3o de impureza nos n\u00f3s da \u00e1rvore.</p> CodeOutputGr\u00e1ficoExplica\u00e7\u00e3o <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\nimportances = pd.Series(clf.feature_importances_, index=X_train.columns).sort_values(ascending=False)\n\ntop10 = importances.head(10)\nprint(top10)\n\nplt.figure(figsize=(10,6))\ntop10.plot(kind=\"bar\")\nplt.title(\"Top 10 Features Importantes\")\nplt.tight_layout()\nplt.savefig(\"docs/decision-tree/exercicio/img/feature_importances.png\")\nplt.show()\n</code></pre> <pre><code>odor_n                 0.89\nspore-print-color_r    0.04\ngill-size_b            0.03\nstalk-root_b           0.02\n...\n</code></pre> <p></p> <ul> <li>O atributo odor \u00e9 de longe o mais importante para a classifica\u00e7\u00e3o.  </li> <li>Outros atributos como spore-print-color e gill-size tamb\u00e9m contribuem.  </li> <li>Features com import\u00e2ncia pr\u00f3xima de zero n\u00e3o foram usadas na \u00e1rvore.  </li> </ul>"},{"location":"decision-tree/exercicio/main/#7-visualizacao-da-arvore","title":"7. Visualiza\u00e7\u00e3o da \u00c1rvore","text":"<p>Para melhor interpretabilidade, foi gerada uma visualiza\u00e7\u00e3o dos quatro primeiros n\u00edveis da \u00e1rvore, evitando excesso de ramifica\u00e7\u00f5es.  </p> CodeOutput\u00c1rvoreExplica\u00e7\u00e3o <pre><code>from sklearn.tree import plot_tree\n\nplt.figure(figsize=(20, 10))\nplot_tree(\n    clf,\n    feature_names=X_train.columns,\n    class_names=[\"edible(0)\", \"poisonous(1)\"],\n    filled=True, rounded=True, fontsize=8,\n    max_depth=4\n)\nplt.savefig(\"docs/decision-tree/exercicio/img/tree_top.png\")\nplt.show()\n</code></pre> <pre><code>Figura salva em: docs/decision-tree/exercicio/img/tree_top.png\n</code></pre> <p></p> <ul> <li>Mostramos apenas os 4 primeiros n\u00edveis da \u00e1rvore para clareza.  </li> <li>A raiz \u00e9 dominada por vari\u00e1veis de odor, confirmando sua relev\u00e2ncia.  </li> <li>A \u00e1rvore completa \u00e9 muito maior devido ao One-Hot Encoding.  </li> </ul>"},{"location":"decision-tree/exercicio/main/#8-conclusoes","title":"8. Conclus\u00f5es","text":"<ul> <li>O modelo obteve 100% de acur\u00e1cia, mas isso n\u00e3o \u00e9 overfitting, e sim reflexo de um dataset sem ru\u00eddo e determin\u00edstico.  </li> <li>O pr\u00e9-processamento simples (imputa\u00e7\u00e3o da moda + One-Hot Encoding) foi suficiente.  </li> <li>As vari\u00e1veis mais importantes confirmam expectativas biol\u00f3gicas (ex.: odor como crit\u00e9rio principal).  </li> <li>A \u00e1rvore de decis\u00e3o mostrou-se totalmente interpret\u00e1vel, atendendo ao objetivo do exerc\u00edcio.</li> </ul>"},{"location":"decision-tree/roteiro/main/","title":"Roteiro","text":""},{"location":"projeto/main/","title":"Projeto","text":"<p>Aqui vai toda a documenta\u00e7\u00e3o do projeto, incluindo o que j\u00e1 foi feito e o que falta fazer.</p>"},{"location":"roteiro1/main/","title":"Roteiro 1","text":""},{"location":"roteiro1/main/#objetivo","title":"Objetivo","text":"<p>Aqui vai o objetivo macro do roteiro. Por que estamos fazendo o que estamos fazendo?</p>"},{"location":"roteiro1/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":"<p>Os pontos \"tarefas\" s\u00e3o os passos que devem ser seguidos para a realiza\u00e7\u00e3o do roteiro. Eles devem ser claros e objetivos. Com evid\u00eancias claras de que foram realizados.</p>"},{"location":"roteiro1/main/#tarefa-1","title":"Tarefa 1","text":"<p>Instalando o MAAS:</p> sudo snap install maas --channel=3.5/Stable <p></p> <p>Dashboard do MAAS</p> <p>Conforme ilustrado acima, a tela inicial do MAAS apresenta um dashboard com informa\u00e7\u00f5es sobre o estado atual dos servidores gerenciados. O dashboard \u00e9 composto por diversos pain\u00e9is, cada um exibindo informa\u00e7\u00f5es sobre um aspecto espec\u00edfico do ambiente gerenciado. Os pain\u00e9is podem ser configurados e personalizados de acordo com as necessidades do usu\u00e1rio.</p>"},{"location":"roteiro1/main/#tarefa-2","title":"Tarefa 2","text":""},{"location":"roteiro1/main/#app","title":"App","text":""},{"location":"roteiro1/main/#tarefa-1_1","title":"Tarefa 1","text":""},{"location":"roteiro1/main/#tarefa-2_1","title":"Tarefa 2","text":"<p>Exemplo de diagrama</p> <pre><code>architecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service disk1(disk)[Storage] in api\n    service disk2(disk)[Storage] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server\n    disk1:T -- B:server\n    disk2:T -- B:db</code></pre> <p>Mermaid</p>"},{"location":"roteiro1/main/#questionario-projeto-ou-plano","title":"Question\u00e1rio, Projeto ou Plano","text":"<p>Esse se\u00e7\u00e3o deve ser preenchida apenas se houver demanda do roteiro.</p>"},{"location":"roteiro1/main/#discussoes","title":"Discuss\u00f5es","text":"<p>Quais as dificuldades encontradas? O que foi mais f\u00e1cil? O que foi mais dif\u00edcil?</p>"},{"location":"roteiro1/main/#conclusao","title":"Conclus\u00e3o","text":"<p>O que foi poss\u00edvel concluir com a realiza\u00e7\u00e3o do roteiro?</p>"},{"location":"roteiro2/main/","title":"Roteiro 2","text":""},{"location":"roteiro2/main/#diagrama-de-classes-do-banco","title":"Diagrama de Classes do Banco","text":"<pre><code>classDiagram\n    class Conta {\n        - String id\n        # double saldo\n        - Cliente cliente\n        + sacar(double valor)\n        + depositar(double valor)\n    }\n    class Cliente {\n        - String id\n        - String nome\n        - List&lt;Conta&gt; contas\n    }\n    class PessoaFisica {\n        - String cpf\n    }\n    class PessoaJuridica {\n        - String cnpj\n    }\n    class ContaCorrente {\n        - double limite\n        + sacar(double valor)\n    }\n    class ContaPoupanca {\n        + sacar(double valor)\n    }\n    Conta *-- Cliente\n    Conta &lt;|-- ContaCorrente\n    Conta &lt;|-- ContaPoupanca\n    Cliente &lt;|-- PessoaFisica\n    Cliente &lt;|-- PessoaJuridica</code></pre>"},{"location":"roteiro2/main/#diagrama-de-sequencia-de-autorizacao","title":"Diagrama de Seq\u00fc\u00eancia de Autoriza\u00e7\u00e3o","text":"<pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Service: request with token\n  Auth Service-&gt;&gt;Auth Service: decodes the token and extracts claims\n  Auth Service-&gt;&gt;Auth Service: verifies permissions\n  critical allowed\n    Auth Service-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Service--&gt;&gt;User: unauthorized message\n  end  </code></pre>"},{"location":"roteiro3/main/","title":"Roteiro 3","text":"<p>Running the code below in Browser (Woooooowwwwww!!!!!!). <sup>1</sup></p> <p> </p> Editor (session: default) Run <pre>import ssl\nimport pandas as pd\n\ndf = pd.DataFrame()\ndf['AAPL'] = pd.Series([1, 2, 3])\ndf['MSFT'] = pd.Series([4, 5, 6])\ndf['GOOGL'] = pd.Series([7, 8, 9])\n\nprint(df)\n</pre> Output Clear <pre></pre> <p></p> <ol> <li> <p>Pyodide \u21a9</p> </li> </ol>"},{"location":"roteiro4/main/","title":"Roteiro 4","text":"<p>Se chegou aqui, \u00e9 porque voc\u00ea est\u00e1 interessado em saber mais. Logo, de brinde, como rodar um c\u00f3digo <code>Python</code> aqui.</p> 2025-10-07T01:18:13.406360 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ 2025-10-07T01:18:14.894832 image/svg+xml Matplotlib v3.10.6, https://matplotlib.org/ <p>Markdown-exec \u00e9 uma extens\u00e3o do Markdown que permite executar c\u00f3digo Python diretamente no Markdown. Isso \u00e9 \u00fatil para gerar resultados din\u00e2micos ou executar scripts de forma interativa.</p>"}]}